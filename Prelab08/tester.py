#! /user/local/bin/python3.4

from moduleTasks import *
from signals import *

if __name__ == "__main__":
    with open("output.txt", 'w') as myFile:
        myFile.write("-----PART2-----\n")
        myFile.write("*****isOK(signalName) function test*****\n")
        myFile.write("checking abc123...\n")
        myFile.write(str(isOK("abc123"))+"\n")
        myFile.write("checking abc-123...\n")
        myFile.write(str(isOK("abc-123"))+"\n")
        myFile.write("checking abc-abc...\n")
        myFile.write(str(isOK("abc-abc"))+"\n")
        myFile.write("checking abc...\n")
        myFile.write(str(isOK("abc"))+"\n")
        myFile.write("checking ABC-123...\n")
        myFile.write(str(isOK("ABC-123"))+"\n")
        myFile.write("*****loadDataFrom(signalName, folderName) function test*****\n")
        signalList = ["AFW-481", "CIG-308", "FPT-701", "GUO-758", "HPQ-298", "HQP-689", "ISO-610", "IWR-395", "NIK-876", "NPU-381", "PKB-567", "PVL-758", "PXF-961", "REY-386", "SQC-307", "TNP-064", "VKY-370", "XDF-846", "XGQ-241", "XZC-901"]
        for signal in signalList:
            myFile.write("checking " + signal + "...\n")
            tup = loadDataFrom(signal, "Signals")
            for i in tup[0]:
                myFile.write(str(i)+" ")
            myFile.write("\n")
            myFile.write("There are " + str(tup[1]) + " non-float values.\n")
        a = loadDataFrom("AFW-481", "Signals")
        b = loadDataFrom("CIG-308", "Signals")
        c = loadDataFrom("FPT-701", "Signals")
        d = loadDataFrom("GUO-758", "Signals")
        e = loadDataFrom("HPQ-298", "Signals")
        f = loadDataFrom("HQP-689", "Signals")
        g = loadDataFrom("ISO-610", "Signals")
        h = loadDataFrom("IWR-395", "Signals")
        i = loadDataFrom("NIK-876", "Signals")
        j = loadDataFrom("NPU-381", "Signals")
        k = loadDataFrom("PKB-567", "Signals")
        l = loadDataFrom("PVL-758", "Signals")
        m = loadDataFrom("PXF-961", "Signals")
        n = loadDataFrom("REY-386", "Signals")
        o = loadDataFrom("SQC-307", "Signals")
        p = loadDataFrom("TNP-064", "Signals")
        q = loadDataFrom("VKY-370", "Signals")
        r = loadDataFrom("XDF-846", "Signals")
        s = loadDataFrom("XGQ-241", "Signals")
        t = loadDataFrom("XZC-901", "Signals")
        myFile.write("*****isBounded(signalValues, bounds, threshold) function test*****\n")
        myFile.write("Same test cases from the above are used.\n")
        myFile.write(str(isBounded(a[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(b[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(c[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(d[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(e[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(f[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(g[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(h[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(i[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(j[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(k[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(l[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(m[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(n[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(o[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(p[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(q[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(r[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(s[0], (-11,11), 9))+"\n") 
        myFile.write(str(isBounded(t[0], (-11,11), 9))+"\n") 
        myFile.write("-----PART3-----\n")
        myFile.write("*****loadMultiple(signalNames, folderName, maxCount) function test*****\n")
        myFile.write("Same test cases from the above are used.\n")
        dictionary = loadMultiple(signalList, "Signals", 7)
        for signal in signalList:
            if dictionary[signal] == []:
                myFile.write(signal + " is rejected.\n")
            else:
                myFile.write(signal + " is accepted.\n")
        myFile.write("*****saveData(signalsDictionary, targetFolder, bounds, threshold) function test*****\n")
        myFile.write("Files written in folder called empty.\n")
        saveData(dictionary, "empty", (-11,11), 9)
